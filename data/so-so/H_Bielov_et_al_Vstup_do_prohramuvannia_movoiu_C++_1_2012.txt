<id>H</id>
<author_surname_1>Бєлов</author_surname_1>
<author_name_1>Юрій</author_name_1>
<author_surname_2>Карнаух</author_surname_2>
<author_name_2>Тетяна</author_name_2>
<author_surname_3>Коваль</author_surname_3>
<author_name_3>Юрій</author_name_3>
<author_surname_4>Ставровський</author_surname_4>
<author_name_4>Андрій</author_name_4>
<title>Вступ до програмування мовою С++. Організація обчислень</title>
<publ_in></publ_in>
<url></url>
<publ_part></publ_part>
<publ_place>Київ</publ_place>
<publisher>Видавничо-поліграфічний центр "Київський університет"</publisher>
<year>2012</year>
<pages>6-13</pages>
<length>1478</length>
<alt_orth>0</alt_orth>
<errors>у алгоритмі - в алгоритмі; Розглянемо задачу - Розгляньмо задачу; Розглянемо їх - Розгляньмо їх; не допускаються команди - неприпустимі команди; незрозуміло, що  - не зрозуміло, що; Незважаючи на - Попри; обробка даних - оброблювання даних; Розглянемо додавання  - Розгляньмо додавання</errors>
<comments></comments>
<body>
Алгоритми та їхні властивості
Програму, призначену для виконання комп'ютером, можна розглядати як різновид алгоритму, що є загальнішим поняттям. Алгоритм – це опис послідовності дій, які треба виконати, щоб розв'язати деяку задачу. Позначення дій у алгоритмі називаються командами або інструкціями (statement).
Зазвичай у алгоритмі вказано деякі вхідні, результатні (вихідні) та проміжні дані, що не є ні вхідними, ні вихідними. Послідовність дій, що виконується за алгоритмом, називається процесом. Алгоритм зазвичай визначає не один, а деяку множину процесів. 
Приклад. Розглянемо задачу: обчислити корені рівняння ax2 +bx+c = 0, заданого коефіцієнтами a, b, c (за умови a  0). Алгоритм розв'язання цієї задачі, тобто опис визначення коренів, може мати такий вигляд. 
<chart>
У цьому алгоритмі вхідними даними є коефіцієнти a, b, c, проміжними – дискримінант d, вихідними – два корені (можливо, один) або текст «дійсних коренів немає». За цим алгоритмом, залежно від конкретних вхідних даних, можна виконати одну з трьох послідовностей дій. 
1. Прочитати коефіцієнти, обчислити d, перевірити, чи d > 0 (і це так), обчислити x1, x2 й написати ці числа. 
2. Прочитати коефіцієнти, обчислити d, перевірити, чи d > 0 (і це не так), перевірити, чи d = 0 (і це так), обчислити x і написати це число. 
3. Прочитати коефіцієнти, обчислити d, перевірити, чи d > 0 (і це не так), перевірити, чи d = 0 (і це не так), і написати, що дійсних коренів немає. 
Вправа 1.1. Модифікуйте наведений алгоритм для розв'язання задачі обчислення коренів рівняння ax2 +bx+c = 0, заданого коефіцієнтами a, b, c, на випадок відсутності додаткової умови a  0.
Алгоритми мають кілька загальних властивостей: зрозумілість, результативність, однозначність, дискретність, масовість і виконуваність. Розглянемо їх. 
Зрозумілість. Для виконання алгоритму завжди потрібен виконавець. Це може бути людина або деяка технічна система, зокрема комп'ютер. Наприклад, виконувати арифметичні дії, розв'язуючи квадратне рівняння (і не тільки), може людина. Однак вона може перекласти цю роботу на комп'ютер, якщо створить відповідну програму та примусить комп'ютер її виконати.  Так само збирати прилади може спеціальна автоматична лінія, якщо виконує відповідну програму. Зрозумілість алгоритму полягає в тому, що виконавець може правильно зрозуміти й виконати команди, записані в алгоритмі. Команди завжди записуються за допомогою певної системи позначень, тобто мови. Отже, виконавець повинен розуміти мову запису алгоритму.
Результативність. Виконання будь-якого алгоритму має приносити його виконавцю або іншій особі відчутні результати. Наприклад, «корені рівняння визначено», «прилад зібрано» тощо.
Однозначність. В алгоритмі не допускаються команди, зміст яких можна сприйняти неоднозначно. Наприклад, якби в алгоритмі розв'язання квадратного рівняння була команда «обчислити x або написати, що коренів немає», то виконавець не знав би, що саме йому робити. Окрім того, після виконання кожної команди виконавець повинен точно знати, що робити далі. 
Дискретність. Дискретність алгоритму полягає в тому, що він задає послідовність дій, чітко відокремлених одна від одної. Отже, дії, задані командою, мають починатися лише після закінчення дій за попередньою командою. Окрім того, виконання кожної команди повинне займати обмежений проміжок часу. 
Масовість. Конкретні об'єкти, до яких застосовуються дії під час виконання алгоритму, визначають конкретні задачі, що часто називаються екземплярами задачі. Наприклад, конкретна трійка чисел 3, 10, 2 відповідає квадратному рівнянню, яке треба розв'язати. Масовість алгоритму полягає в тому, що він застосовний до різних наборів вхідних даних, тобто до різних екземплярів задач. Найчастіше алгоритм описує не один, а деяку множину процесів, які відбуваються при розв'язанні всіх можливих екземплярів задачі, хоча існують і алгоритми, що задають тільки один процес.
Виконуваність і скінченність. Алгоритм має бути таким, щоб на кожному екземплярі задачі його можна було виконати до кінця (й отримати результат). Кожен процес, заданий алгоритмом, має бути скінченним і тривати скінченний час. Окрім того, процес не повинен обриватися без отримання результату. 
Приклад. Ділення числа в стовпчик, тобто утворення десяткового дробу, може бути, залежно від конкретного числа, скінченним або нескінченним (для 5/4 дріб скінченний, для 5/3 – ні). Якщо за деяким алгоритмом потрібно ділити числа, і дільником є 0, то ділення неможливе, і незрозуміло, що робити далі.
Алгоритм має враховувати можливість нескінченного виконання дій або неможливість виконати наступну дію й містити команди, що забезпечують закінчення дій з деяким результатом за будь-яких умов. У деяких ситуаціях розглядають реальну виконуваність, ураховуючи вимоги до тривалості процесу, які висуваються в конкретних задачах. Існують задачі, для яких секунда – це занадто довго, а є такі, що розв'язуються протягом кількох діб. 
1.3. Модель комп'ютера 
Незважаючи на технологічний прогрес, більшість сучасних комп'ютерів побудовано за тими самими принципами, що й обчислювальні машини 40-х рр. XX ст. В їх основі лежить так звана архітектура фон Неймана (за ім'ям видатного американського вченого, який першим сформулював головні засади архітектури електронних обчислювальних машин). 
Загальну структуру комп'ютера наведено на рис. 1.1 (насправді вона набагато складніша). З основних елементів комп'ютера назвемо лише материнську плату, центральний процесор, оперативну пам'ять і зовнішні пристрої. На материнській платі розташовані: центральний процесор, оперативна пам'ять (ОП), центральна магістраль для зв'язку між усіма пристроями комп'ютера, гнізда для підключення інших плат керування зовнішніми пристроями й деякі інші елементи. 
Зовнішні пристрої (пристрої введення-виведення) – це дисплей (монітор), клавіатура, маніпулятор «миша», дисководи та інші (сканер, модем тощо). Вони керують обробкою даних на зовнішніх носіях. Пристрої введення-виведення мають власні процесори, які можуть переносити дані із зовнішніх носіїв до оперативної пам'яті або навпаки. 
<chart>
Комп'ютерна програма є послідовністю команд, основний зміст яких – обробка даних. Центральний процесор зчитує дані й команди програми з оперативної пам'яті та виконує їх. Команди задають зчитування даних із пам'яті, створення нових даних і запис їх у пам'ять. Є також команди, за якими дані надходять до зовнішніх пристроїв або зчитуються з них. 
Усі дані в комп'ютері є послідовностями 0 та 1. Значення 0 та 1 відповідають двом стійким станам елемента пам'яті, що називається біт (bit, або binary digit – двійкова цифра). Вісім послідовних бітів утворюють байт. 
Оперативна пам'ять – це послідовність байтів, в якій кожен байт має свій номер – адресу. Деяке значення (число, символ тощо) у пам'яті зазвичай займає кілька сусідніх байтів і вказується адресою першого з них. 
Абревіатурою для біта є "б", для байта – "Б". Від байта походять такі одиниці інформації, як КБ (кілобайт, 210 = 1024 Б), МБ (мегабайт, 220 = 1048576 Б), ГБ (гігабайт, 230 = 1073741824 Б) і ТБ (терабайт, 1024 ГБ, тобто 240 Б). Розмір оперативної пам'яті вимірюється зазвичай сотнями й тисячами МБ і середній розмір пам'яті комп'ютерів щороку зростає. 
Машинні команди, як і дані, також записуються послідовностями 0 і 1. Спрощено можна сказати, що команда містить код машинної операції та адреси даних, до яких застосовується операція. Система команд, які може виконувати процесор, називається машинною мовою. Для людини машинні мови дуже незручні, вони вимагають глибоких знань про устрій вузлів комп'ютера й подробиці виконання програми. Цими мовами користуються розробники комп'ютерів і деякі інші спеціалісти. 
1.4. Зображення чисел 
1.4.1. Двійковий запис чисел 
Усі дані в комп'ютері зображуються (кодуються) у вигляді послідовностей 0 та 1. Зображення чисел за допомогою 0 та 1 називається двійковим, тобто зображенням у двійковій системі числення. 
Звична десяткова система має 10 цифр. У записі числа молодша цифра позначає кількість одиниць, наступні – кількість десятків, сотень і подальших степенів числа 10. Кожна кількість може бути від 0 до 9. У двійковій системі роль десятки відіграє число 2, а цифри 0 та 1 позначають можливу кількість 0 або 1. Цифри позначають кількість відповідних степенів числа 2. Отже, послідовні натуральні числа 0, 1, 2, 3, 4, 5 мають двійкові записи 0, 1, 10, 11, 100, 101. Зокрема, у записі числа вигляду 2n (тобто 1, 2, 4, 8 тощо) старша цифра 1 і далі n нулів, а запис 2n–1 – це n одиниць, що позначають суму 2n-1 + 2n-2 + … + 21 + 20. 
Розглянемо додавання цілих чисел у двійковому записі: 0+0 = 0, 1+0 = 0+1 = 1, 1+1 = 10, 1+1+1 = 11. Додавання двійкових чисел у стовпчик, починаючи з молодших цифр (розрядів), дає значення 0 або 1 у розряді й перенесення 0 або 1 у наступний розряд. Наприклад, при додаванні 111+110 = 1101 із молодшого розряду (він перший праворуч) переноситься 0 у другий, з другого – 1 у третій, а перенесення 1 з третього стає четвертим розрядом суми.
У десятковому дробі кожна цифра позначає кількість (від 0 до 9) від'ємних степенів числа 10. Аналогічно у двійковому дробі цифри 0 або 1 позначають кількість від'ємних степенів числа 2, тобто 1/2, 1/4, 1/8 тощо. Наприклад, запис 0,11 позначає 2-1 + 2-2 = 3/4, а запис 0,0001 – число 2-4, тобто 1/16, що має десятковий запис 0,0625. 
1.4.2. Принципи зображення чисел у комп'ютері 
Стандартне зображення чисел у комп'ютері займає кілька послідовних байтів. Один байт може мати 28 = 256 станів і зображувати кожним із них одне з 256 значень, наприклад, ціле число від 0 до 255 або ціле число від -128 до 127 (яких теж 256), або щось інше. Два байти можуть мати 216 = 65536 станів і зображувати ними 216 різних значень тощо. 
Цілі числа. Цілі числа зображуються в комп'ютері переважно у двох формах – без знака й зі знаком. Ці форми називаються кодами. Числа ототожнюються з їх зображеннями, хоча з погляду математики це є хибним. 
Беззнаковий код займає кілька байтів (найчастіше 1, 2, 4 або 8). Один байт зображує числа від 0 до 255 в їх двійковому записі, можливо, з незначущими нулями, а саме: байт 00000000 – число 0, байт 00000001 – число 1, байт 00000010 – число 2 тощо. 
</body>