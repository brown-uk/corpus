
5.2. Функція та її виклики 
5.2.1. Приклад функції у програмі 
Розглянемо засоби створення підпрограм мовою C++. У цій мові підпрограма називається функцією. Програма зазвичай містить головну функцію та кілька допоміжних, які описують розв'язання підзадач основної задачі. Ознайомимося зі створенням функцій на простому прикладі. Приклад. Обчислити периметр трикутника на площині, заданого координатами його вершин. Нехай (x1, y1), (x2, y2), (x3, y3) – координати вершин трикутника. Щоб обчислити його периметр, потрібні довжини сторін (відрізків із кінцями у вершинах) . 
Вони обчислюються, по суті, однаково, лише з різними парами точок. Однак ці доволі громіздкі й дуже схожі вирази писати тричі не будемо, оскільки всі вони описують конкретні розв'язання такої загальної підзадачі: обчислити довжину відрізка за чотирма координатами його кінців. Довжина залежить від чотирьох величин – параметрів підзадачі. Коли розв'язується підзадача, параметри мають конкретні значення-координати – аргументи в цьому конкретному розв'язанні. Опишемо розв'язання вказаної підзадачі у вигляді окремої функції з іменем dist, параметрами якої є чотири дійсні величини, позначені іменами. У головній же функції напишемо три виклики функції dist, в яких укажемо координати потрібних нам точок.

У наведеному тексті перші два рядки після інструкції using утворюють заголовок функції. Функція описує обчислення довжини відрізка – дійсного числа, яке повертається з виклику функції. Тип значень, що повертаються, указано в її заголовку перед іменем функції. Після імені в круглих дужках оголошено параметри функції – дійсні змінні з іменами a1, b1, a2, b2. Після заголовку записано коментар, який хоча й не обов'язковий, але дуже корисний: він повідомляє, що має обчислювати ця функція. Далі йде тіло функції – блок, що містить послідовність інструкцій. Тут лише одна інструкція, яка задає обчислення й повернення дійсного значення виразу – зарезервоване слово return означає "повернути". 
У головній функції виклики функції dist записано у виразі – значення, що повертаються з викликів, додаються, і ця сума виводиться. 
Оголошення параметрів функції, хоча й розташоване за межами блоку функції, діє в цьому блоці до його кінця. Параметри функції, імена яких оголошено в заголовку, в літературі часто називаються формальними параметрами, а вирази або імена змінних, записані у виклику, – фактичними параметрами.
Функція може не мати параметрів, але круглі дужки в її заголовку обов'язкові. 
Виклик функції є виразом і може виступати операндом в інших виразах. Його типом вважається вказаний у заголовку тип значення, яке повертається. 
Будь-яке виконання функції, що повертає значення, має закінчуватися виконанням інструкції return із виразом, тип якого може бути перетворений до типу значень, що повертаються. В іншому випадку виконання функції може мати непередбачувані наслідки.
5.2.2. Прототип функції 
Ім'я функції необхідно оголосити в тексті програми до того, як воно буде використовуватися. Проте записувати всю функцію вище від її викликів не обов'язково – достатньо записати лише її заголовок. 
Заголовок функції зі знаком ";" у кінці називається прототипом функції. Прототип є інструкцією оголошення функції й повідомляє компілятору, що в програмі є така функція. Після оголошення функцію все одно необхідно означити, тобто описати задані нею дії. Означення функції складається із заголовка й тіла. 
Загальноприйнятою практикою програмування мовою C++ є запис прототипів функцій програми на її початку (зазвичай після зовнішніх оголошень імен констант, типів і змінних). Після прототипів зазвичай записують головну функцію, а за нею – оголошені та інші функції. Порядок розташування оголошених функцій може бути довільним. Поруч із прототипом функції варто вказати: 
– призначення функції, тобто що саме вона виконує та яким є зміст її параметрів; 
– передумови – умови, що мають справджуватися перед її викликом, зокрема умови для її аргументів (фактичних параметрів); 
– післяумови – умови, що справджуються після її виклику, зокрема, як функція змінює глобальні змінні програми; – поведінку функції за некоректних фактичних параметрів.
